from itertools import chain

import tg


class CardTypes:
    """Maintains a list of card generators. Any page can use cards by instantiating
    a :class:`CardTypes` variable.
    """

    def __init__(self):
        self.list = []

    def register(self, generator, title_template=None, body_template=None):
        """Register a new card generator

        :param generator: a generator function that yields individual cards.
        :param title_template: (optional) the file where the Kajiki template
            for the cards' title is. Defaults to ``None``.
        :param body_template: (optional) the file where the Kajiki template
            for the cards' body is. Defaults to ``None``.
        :return: ``None``
        :rtype: None
        """

        def _generate_cards(*args, **kwargs):
            """Render every card using :func:`tg.render_template`. All
            arguments are given to each of the card generators"""
            for gened in generator(*args, **kwargs):
                if title_template is not None:
                    gened.title_escape = False
                    gened.title = tg.render_template(template_vars={**gened.title},
                                                     template_name=title_template)

                if body_template is not None:
                    gened.body_escape = False
                    gened.body = tg.render_template(template_vars={**gened.body},
                                                    template_name=body_template)

                yield gened

        self.list.append(_generate_cards)

    def generate_cards(self, *args, **kwargs):
        """Generates an iterable that contains all of the cards

        All arguments passed to this function are immediately passed to the
        registered (see :func:`register`) generators. The return value of this
        function can be passed to the `section` function defined in
        acmwebsite/templates/card_section.xhtml, whose return value can in turn
        be used to generate the cards in any location on a webpage.

        For example, a webpage's Kajiki file can generate cards by first
        importing the card api::
            <py:import href="acmwebsite.templates.card_section" alias="cards"/>

        and then, when necessary, generating the cards anywhere on the
        webpage::
            ${cards.section(cardlist)}
        """
        return chain(*(card_gen(*args, **kwargs) for card_gen in self.list))


class Card:
    """A data structure which defines the basic elements of a card. Objects of this
    type are generated by the registered functions of a :class:`CardTypes`
    object.
    """
    def __init__(self, title, body):
        """Create a :class:`Card` with a given title and body.

        :param title: the title of the card; this will be displayed in the
            header.
        :param body: the body of the card; this will be displayed in the main
            section of the card.
        """
        self.title = title
        self.body = body
        self.title_escape = True
        self.body_escape = True
